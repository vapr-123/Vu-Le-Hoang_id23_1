from fastapi import FastAPI, BackgroundTasks, HTTPException
from pydantic import BaseModel
from typing import Optional
import uvicorn
from hashlib import sha256
import os
import random
import string
from uuid import uuid4

app = FastAPI()

# Псевдокласс для хранения состояния задач
class Task:
    def __init__(self, id: str):
        self.id = id
        self.status = "running"
        self.progress = 0
        self.result = None

tasks = {}

# Модель для входящих данных
class BrutHashRequest(BaseModel):
    hash: str
    charset: str
    max_length: int

class StatusResponse(BaseModel):
    status: str
    progress: int
    result: Optional[str]

# Эндпоинт для брутфорса
@app.post("/brut_hash")
def brut_hash(data: BrutHashRequest, background_tasks: BackgroundTasks):
    if data.max_length > 8:
        raise HTTPException(status_code=400, detail="max_length должно быть <= 8")

    task_id = str(uuid4())
    task = Task(task_id)
    tasks[task_id] = task

    background_tasks.add_task(brute_force, data.hash, data.charset, data.max_length, task)

    return {"task_id": task_id}

def brute_force(hash: str, charset: str, max_length: int, task: Task):
    def generate_passwords(charset, max_length):
        for length in range(1, max_length + 1):
            for password_tuple in product(charset, repeat=length):
                yield ''.join(password_tuple)

    for progress, password in enumerate(generate_passwords(charset, max_length), start=1):
        if check_password(hash, password):
            task.status = "completed"
            task.result = password
            break

        # Обновление статуса прогресса
        task.progress = (progress / (len(charset) ** max_length)) * 100

    if task.status != "completed":
        task.status = "failed"

def check_password(stored_hash: str, password: str) -> bool:
    return sha256(password.encode()).hexdigest() == stored_hash

@app.get("/get_status/{task_id}", response_model=StatusResponse)
def get_status(task_id: str):
    task = tasks.get(task_id)

    if task is None:
        raise HTTPException(status_code=404, detail="Task not found")

    return {
        "status": task.status,
        "progress": task.progress,
        "result": task.result
    }

if __name__ == "__main__":
    uvicorn.run("Main:app", reload=True)
